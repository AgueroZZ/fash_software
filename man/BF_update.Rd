% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/06_BF.R
\name{BF_update}
\alias{BF_update}
\title{Update Prior and Posterior Weights in a FASH Object Using Bayes Factor Control}
\usage{
BF_update(fash, plot = FALSE)
}
\arguments{
\item{fash}{A \code{fash} object containing the fitted model and likelihood matrix.}

\item{plot}{A logical value. If \code{TRUE}, generates diagnostic plots for BF control.}
}
\value{
The updated \code{fash} object with the following components updated:
\describe{
  \item{prior_weights}{Updated prior mixture weights reflecting the estimated \eqn{\pi_0}.}
  \item{posterior_weights}{Updated posterior mixture weights for each dataset.}
  \item{BF}{Computed Bayes Factors for each dataset.}
  \item{lfdr}{Local False Discovery Rate (LFDR), extracted as the first column of `posterior_weights`.}
}
}
\description{
This function updates the prior and posterior weights in a fitted \code{fash} object using
Bayes Factor (BF) control. It automatically computes the Bayes Factor (BF), estimates
the proportion of null datasets (\eqn{\pi_0}), and updates the model accordingly.
}
\details{
This function performs the following steps:
\enumerate{
  \item \bold{Computes Bayes Factors (BF)}: The BF is calculated as the ratio of likelihood under
        the alternative hypothesis to the likelihood under the null hypothesis.
  \item \bold{Estimates \eqn{\pi_0}}: The function applies BF-based control to estimate
        the proportion of null datasets.
  \item \bold{Updates prior weights}: The function updates the prior mixture weights to reflect
        the estimated null proportion.
  \item \bold{Updates posterior weights}: The posterior weights are updated based on the
        reweighted prior and likelihood matrix.
  \item \bold{Stores the computed Bayes Factors and LFDR}: The function now saves the computed BF
        and LFDR in the \code{fash} object for further analysis.
}
}
\examples{

# Example usage:
set.seed(1)
data_list <- list(
  data.frame(y = rpois(5, lambda = 5), x = 1:5, offset = 0),
  data.frame(y = rpois(5, lambda = 5), x = 1:5, offset = 0)
)
grid <- seq(0, 2, length.out = 10)
fash_obj <- fash(data_list = data_list, Y = "y", smooth_var = "x",
                 grid = grid, likelihood = "poisson", verbose = TRUE)

# Update prior and posterior weights using BF control
fash_updated <- BF_update(fash_obj, plot = TRUE)

# Access updated components
print(fash_updated$prior_weights)
print(fash_updated$posterior_weights)
print(fash_updated$BF)
print(fash_updated$lfdr)

}
