% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/04_fash.R
\name{testing_functional}
\alias{testing_functional}
\title{Perform Functional Hypothesis Testing on Posterior Samples}
\usage{
testing_functional(
  functional,
  lfsr_cal = function(x) {
     min(mean(x <= 0), mean(x >= 0))
 },
  fash,
  indices,
  smooth_var = NULL,
  num_cores = 1
)
}
\arguments{
\item{functional}{A function applied to each posterior sample to extract a scalar statistic.}

\item{lfsr_cal}{A function used to compute the local false sign rate (lfsr).
Default is `function(x) {min(mean(x <= 0), mean(x >= 0))}`.}

\item{fash}{A `fash` object.}

\item{indices}{A numeric vector specifying the dataset indices to evaluate.}

\item{smooth_var}{A numeric vector specifying refined x values for prediction.}

\item{num_cores}{An integer specifying the number of cores to use for parallel processing.
Default is `1` (sequential execution).}
}
\value{
A data frame containing:

\describe{
  \item{indices}{The dataset indices corresponding to `indices`.}
  \item{lfsr}{The computed local false sign rate (LFSR) for each dataset.}
  \item{cfsr}{The cumulative false sign rate (CFSR), calculated as the cumulative mean of `lfsr`.}
}
}
\description{
This function applies a user-specified functional to posterior samples from a `fash` object, calculates the
local false sign rate (LFSR) for each dataset, and returns a ranked data frame. The computation can be
parallelized if `num_cores > 1`.
}
\examples{
# Define a functional (e.g., mean of posterior samples)
functional_example <- function(x) { mean(x) }

# Example fash object (assuming it has been fitted)
data_list <- list(
  data.frame(y = rpois(5, lambda = 5), x = 1:5, offset = 0),
  data.frame(y = rpois(5, lambda = 5), x = 1:5, offset = 0)
)
grid <- seq(0, 2, length.out = 10)
fash_obj <- fash(data_list = data_list, Y = "y", smooth_var = "x", grid = grid, likelihood = "poisson", verbose = TRUE)

# Perform functional hypothesis testing with parallel execution
result <- testing_functional(functional = functional_example, fash = fash_obj, indices = 1:2, num_cores = 2)
print(result)


}
