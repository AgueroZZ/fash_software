% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/05_lfsr.R
\name{compute_lfsr_sampling}
\alias{compute_lfsr_sampling}
\title{Compute Local False Sign Rate (LFSR) for a Single Dataset}
\usage{
compute_lfsr_sampling(fash_fit, index, smooth_var = NULL, M = 3000, deriv = 0)
}
\arguments{
\item{fash_fit}{A \code{fash} object containing posterior samples.}

\item{index}{An integer specifying the dataset index for which to compute the LFSR.}

\item{smooth_var}{A numeric vector specifying refined x values for prediction.
If \code{NULL}, defaults to the dataset's original x values.}

\item{M}{An integer specifying the number of posterior samples to generate.}

\item{deriv}{An integer specifying the order of the derivative to compute.}
}
\value{
A list containing:
\describe{
  \item{lfsr}{A numeric vector of LFSR values, where each entry corresponds to a grid point in \code{smooth_var}.}
  \item{pos_prob}{A numeric vector of probabilities that the effect is positive at each grid point.}
  \item{neg_prob}{A numeric vector of probabilities that the effect is negative at each grid point.}
}
}
\description{
This function computes the local false sign rate (LFSR) for a specific dataset within a \code{fash} object
using posterior sampling. It estimates the probability that the sign of the effect is positive or negative
at each grid point and returns the full probability vectors.
}
\examples{
# Example fash object (assuming it has been fitted)
data_list <- list(
  data.frame(y = rpois(5, lambda = 5), x = 1:5, offset = 0),
  data.frame(y = rpois(5, lambda = 5), x = 1:5, offset = 0)
)
grid <- seq(0, 2, length.out = 10)
fash_obj <- fash(data_list = data_list, Y = "y", smooth_var = "x", grid = grid, likelihood = "poisson", verbose = TRUE)

# Compute LFSR for a single dataset
lfsr_result <- compute_lfsr_sampling(fash_obj, index = 1, smooth_var = seq(0, 5, by = 0.1), M = 3000)
print(lfsr_result$lfsr)  # Print the LFSR values
print(lfsr_result$pos_prob)  # Print the positive probability
print(lfsr_result$neg_prob)  # Print the negative probability

}
